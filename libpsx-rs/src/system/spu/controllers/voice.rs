use crate::{
    system::{
        spu::{
            constants::*,
            types::*,
        },
        types::State,
    },
    types::memory::*,
};

pub fn get_transfer_mode(control: &B16LevelRegister) -> TransferMode {
    match control.read_bitfield(CONTROL_TRANSFER_MODE) {
        0 => TransferMode::Stop,
        1 => TransferMode::ManualWrite,
        2 => TransferMode::DmaWrite,
        3 => TransferMode::DmaRead,
        _ => unreachable!("Invalid transfer mode"),
    }
}

pub fn get_voll(state: &State, voice_id: usize) -> &B16LevelRegister {
    match voice_id {
        0 => &state.spu.voice0_voll,
        1 => &state.spu.voice1_voll,
        2 => &state.spu.voice2_voll,
        3 => &state.spu.voice3_voll,
        4 => &state.spu.voice4_voll,
        5 => &state.spu.voice5_voll,
        6 => &state.spu.voice6_voll,
        7 => &state.spu.voice7_voll,
        8 => &state.spu.voice8_voll,
        9 => &state.spu.voice9_voll,
        10 => &state.spu.voice10_voll,
        11 => &state.spu.voice11_voll,
        12 => &state.spu.voice12_voll,
        13 => &state.spu.voice13_voll,
        14 => &state.spu.voice14_voll,
        15 => &state.spu.voice15_voll,
        16 => &state.spu.voice16_voll,
        17 => &state.spu.voice17_voll,
        18 => &state.spu.voice18_voll,
        19 => &state.spu.voice19_voll,
        20 => &state.spu.voice20_voll,
        21 => &state.spu.voice21_voll,
        22 => &state.spu.voice22_voll,
        23 => &state.spu.voice23_voll,
        _ => unreachable!("Invalid voice id"),
    }
}

pub fn get_volr(state: &State, voice_id: usize) -> &B16LevelRegister {
    match voice_id {
        0 => &state.spu.voice0_volr,
        1 => &state.spu.voice1_volr,
        2 => &state.spu.voice2_volr,
        3 => &state.spu.voice3_volr,
        4 => &state.spu.voice4_volr,
        5 => &state.spu.voice5_volr,
        6 => &state.spu.voice6_volr,
        7 => &state.spu.voice7_volr,
        8 => &state.spu.voice8_volr,
        9 => &state.spu.voice9_volr,
        10 => &state.spu.voice10_volr,
        11 => &state.spu.voice11_volr,
        12 => &state.spu.voice12_volr,
        13 => &state.spu.voice13_volr,
        14 => &state.spu.voice14_volr,
        15 => &state.spu.voice15_volr,
        16 => &state.spu.voice16_volr,
        17 => &state.spu.voice17_volr,
        18 => &state.spu.voice18_volr,
        19 => &state.spu.voice19_volr,
        20 => &state.spu.voice20_volr,
        21 => &state.spu.voice21_volr,
        22 => &state.spu.voice22_volr,
        23 => &state.spu.voice23_volr,
        _ => unreachable!("Invalid voice id"),
    }
}

pub fn get_srate(state: &State, voice_id: usize) -> &B16LevelRegister {
    match voice_id {
        0 => &state.spu.voice0_srate,
        1 => &state.spu.voice1_srate,
        2 => &state.spu.voice2_srate,
        3 => &state.spu.voice3_srate,
        4 => &state.spu.voice4_srate,
        5 => &state.spu.voice5_srate,
        6 => &state.spu.voice6_srate,
        7 => &state.spu.voice7_srate,
        8 => &state.spu.voice8_srate,
        9 => &state.spu.voice9_srate,
        10 => &state.spu.voice10_srate,
        11 => &state.spu.voice11_srate,
        12 => &state.spu.voice12_srate,
        13 => &state.spu.voice13_srate,
        14 => &state.spu.voice14_srate,
        15 => &state.spu.voice15_srate,
        16 => &state.spu.voice16_srate,
        17 => &state.spu.voice17_srate,
        18 => &state.spu.voice18_srate,
        19 => &state.spu.voice19_srate,
        20 => &state.spu.voice20_srate,
        21 => &state.spu.voice21_srate,
        22 => &state.spu.voice22_srate,
        23 => &state.spu.voice23_srate,
        _ => unreachable!("Invalid voice id"),
    }
}

pub fn get_saddr(state: &State, voice_id: usize) -> &B16LevelRegister {
    match voice_id {
        0 => &state.spu.voice0_saddr,
        1 => &state.spu.voice1_saddr,
        2 => &state.spu.voice2_saddr,
        3 => &state.spu.voice3_saddr,
        4 => &state.spu.voice4_saddr,
        5 => &state.spu.voice5_saddr,
        6 => &state.spu.voice6_saddr,
        7 => &state.spu.voice7_saddr,
        8 => &state.spu.voice8_saddr,
        9 => &state.spu.voice9_saddr,
        10 => &state.spu.voice10_saddr,
        11 => &state.spu.voice11_saddr,
        12 => &state.spu.voice12_saddr,
        13 => &state.spu.voice13_saddr,
        14 => &state.spu.voice14_saddr,
        15 => &state.spu.voice15_saddr,
        16 => &state.spu.voice16_saddr,
        17 => &state.spu.voice17_saddr,
        18 => &state.spu.voice18_saddr,
        19 => &state.spu.voice19_saddr,
        20 => &state.spu.voice20_saddr,
        21 => &state.spu.voice21_saddr,
        22 => &state.spu.voice22_saddr,
        23 => &state.spu.voice23_saddr,
        _ => unreachable!("Invalid voice id"),
    }
}

pub fn get_adsr(state: &State, voice_id: usize) -> &B32LevelRegister {
    match voice_id {
        0 => &state.spu.voice0_adsr,
        1 => &state.spu.voice1_adsr,
        2 => &state.spu.voice2_adsr,
        3 => &state.spu.voice3_adsr,
        4 => &state.spu.voice4_adsr,
        5 => &state.spu.voice5_adsr,
        6 => &state.spu.voice6_adsr,
        7 => &state.spu.voice7_adsr,
        8 => &state.spu.voice8_adsr,
        9 => &state.spu.voice9_adsr,
        10 => &state.spu.voice10_adsr,
        11 => &state.spu.voice11_adsr,
        12 => &state.spu.voice12_adsr,
        13 => &state.spu.voice13_adsr,
        14 => &state.spu.voice14_adsr,
        15 => &state.spu.voice15_adsr,
        16 => &state.spu.voice16_adsr,
        17 => &state.spu.voice17_adsr,
        18 => &state.spu.voice18_adsr,
        19 => &state.spu.voice19_adsr,
        20 => &state.spu.voice20_adsr,
        21 => &state.spu.voice21_adsr,
        22 => &state.spu.voice22_adsr,
        23 => &state.spu.voice23_adsr,
        _ => unreachable!("Invalid voice id"),
    }
}

pub fn get_cvol(state: &State, voice_id: usize) -> &B16LevelRegister {
    match voice_id {
        0 => &state.spu.voice0_cvol,
        1 => &state.spu.voice1_cvol,
        2 => &state.spu.voice2_cvol,
        3 => &state.spu.voice3_cvol,
        4 => &state.spu.voice4_cvol,
        5 => &state.spu.voice5_cvol,
        6 => &state.spu.voice6_cvol,
        7 => &state.spu.voice7_cvol,
        8 => &state.spu.voice8_cvol,
        9 => &state.spu.voice9_cvol,
        10 => &state.spu.voice10_cvol,
        11 => &state.spu.voice11_cvol,
        12 => &state.spu.voice12_cvol,
        13 => &state.spu.voice13_cvol,
        14 => &state.spu.voice14_cvol,
        15 => &state.spu.voice15_cvol,
        16 => &state.spu.voice16_cvol,
        17 => &state.spu.voice17_cvol,
        18 => &state.spu.voice18_cvol,
        19 => &state.spu.voice19_cvol,
        20 => &state.spu.voice20_cvol,
        21 => &state.spu.voice21_cvol,
        22 => &state.spu.voice22_cvol,
        23 => &state.spu.voice23_cvol,
        _ => unreachable!("Invalid voice id"),
    }
}

pub fn get_raddr(state: &State, voice_id: usize) -> &B16LevelRegister {
    match voice_id {
        0 => &state.spu.voice0_raddr,
        1 => &state.spu.voice1_raddr,
        2 => &state.spu.voice2_raddr,
        3 => &state.spu.voice3_raddr,
        4 => &state.spu.voice4_raddr,
        5 => &state.spu.voice5_raddr,
        6 => &state.spu.voice6_raddr,
        7 => &state.spu.voice7_raddr,
        8 => &state.spu.voice8_raddr,
        9 => &state.spu.voice9_raddr,
        10 => &state.spu.voice10_raddr,
        11 => &state.spu.voice11_raddr,
        12 => &state.spu.voice12_raddr,
        13 => &state.spu.voice13_raddr,
        14 => &state.spu.voice14_raddr,
        15 => &state.spu.voice15_raddr,
        16 => &state.spu.voice16_raddr,
        17 => &state.spu.voice17_raddr,
        18 => &state.spu.voice18_raddr,
        19 => &state.spu.voice19_raddr,
        20 => &state.spu.voice20_raddr,
        21 => &state.spu.voice21_raddr,
        22 => &state.spu.voice22_raddr,
        23 => &state.spu.voice23_raddr,
        _ => unreachable!("Invalid voice id"),
    }
}

pub fn get_play_state(state: &mut ControllerState, voice_id: usize) -> &mut PlayState {
    match voice_id {
        0 => &mut state.dac.voice0_state,
        1 => &mut state.dac.voice1_state,
        2 => &mut state.dac.voice2_state,
        3 => &mut state.dac.voice3_state,
        4 => &mut state.dac.voice4_state,
        5 => &mut state.dac.voice5_state,
        6 => &mut state.dac.voice6_state,
        7 => &mut state.dac.voice7_state,
        8 => &mut state.dac.voice8_state,
        9 => &mut state.dac.voice9_state,
        10 => &mut state.dac.voice10_state,
        11 => &mut state.dac.voice11_state,
        12 => &mut state.dac.voice12_state,
        13 => &mut state.dac.voice13_state,
        14 => &mut state.dac.voice14_state,
        15 => &mut state.dac.voice15_state,
        16 => &mut state.dac.voice16_state,
        17 => &mut state.dac.voice17_state,
        18 => &mut state.dac.voice18_state,
        19 => &mut state.dac.voice19_state,
        20 => &mut state.dac.voice20_state,
        21 => &mut state.dac.voice21_state,
        22 => &mut state.dac.voice22_state,
        23 => &mut state.dac.voice23_state,
        _ => unreachable!("Invalid voice id"),
    }
}
